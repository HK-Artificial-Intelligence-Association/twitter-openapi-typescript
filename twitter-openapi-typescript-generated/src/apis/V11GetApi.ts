/* tslint:disable */
/* eslint-disable */
/**
 * Twitter OpenAPI
 * Twitter OpenAPI(Swagger) specification
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: yuki@yuki0311.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';

export interface GetFriendsFollowingListRequest {
    include_profile_interstitial_type: number;
    include_blocking: number;
    include_blocked_by: number;
    include_followed_by: number;
    include_want_retweets: number;
    include_mute_edge: number;
    include_can_dm: number;
    include_can_media_tag: number;
    include_ext_has_nft_avatar: number;
    include_ext_is_blue_verified: number;
    include_ext_verified_type: number;
    include_ext_profile_image_shape: number;
    skip_status: number;
    cursor: number;
    user_id: string;
    count: number;
    with_total_count: boolean;
}

export interface GetSearchTypeaheadRequest {
    include_ext_is_blue_verified: number;
    include_ext_verified_type: number;
    include_ext_profile_image_shape: number;
    q: string;
    src: string;
    result_type: string;
}

/**
 * 
 */
export class V11GetApi extends runtime.BaseAPI {

    /**
     * get friends following list
     */
    async getFriendsFollowingListRaw(requestParameters: GetFriendsFollowingListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.include_profile_interstitial_type === null || requestParameters.include_profile_interstitial_type === undefined) {
            throw new runtime.RequiredError('include_profile_interstitial_type','Required parameter requestParameters.include_profile_interstitial_type was null or undefined when calling getFriendsFollowingList.');
        }

        if (requestParameters.include_blocking === null || requestParameters.include_blocking === undefined) {
            throw new runtime.RequiredError('include_blocking','Required parameter requestParameters.include_blocking was null or undefined when calling getFriendsFollowingList.');
        }

        if (requestParameters.include_blocked_by === null || requestParameters.include_blocked_by === undefined) {
            throw new runtime.RequiredError('include_blocked_by','Required parameter requestParameters.include_blocked_by was null or undefined when calling getFriendsFollowingList.');
        }

        if (requestParameters.include_followed_by === null || requestParameters.include_followed_by === undefined) {
            throw new runtime.RequiredError('include_followed_by','Required parameter requestParameters.include_followed_by was null or undefined when calling getFriendsFollowingList.');
        }

        if (requestParameters.include_want_retweets === null || requestParameters.include_want_retweets === undefined) {
            throw new runtime.RequiredError('include_want_retweets','Required parameter requestParameters.include_want_retweets was null or undefined when calling getFriendsFollowingList.');
        }

        if (requestParameters.include_mute_edge === null || requestParameters.include_mute_edge === undefined) {
            throw new runtime.RequiredError('include_mute_edge','Required parameter requestParameters.include_mute_edge was null or undefined when calling getFriendsFollowingList.');
        }

        if (requestParameters.include_can_dm === null || requestParameters.include_can_dm === undefined) {
            throw new runtime.RequiredError('include_can_dm','Required parameter requestParameters.include_can_dm was null or undefined when calling getFriendsFollowingList.');
        }

        if (requestParameters.include_can_media_tag === null || requestParameters.include_can_media_tag === undefined) {
            throw new runtime.RequiredError('include_can_media_tag','Required parameter requestParameters.include_can_media_tag was null or undefined when calling getFriendsFollowingList.');
        }

        if (requestParameters.include_ext_has_nft_avatar === null || requestParameters.include_ext_has_nft_avatar === undefined) {
            throw new runtime.RequiredError('include_ext_has_nft_avatar','Required parameter requestParameters.include_ext_has_nft_avatar was null or undefined when calling getFriendsFollowingList.');
        }

        if (requestParameters.include_ext_is_blue_verified === null || requestParameters.include_ext_is_blue_verified === undefined) {
            throw new runtime.RequiredError('include_ext_is_blue_verified','Required parameter requestParameters.include_ext_is_blue_verified was null or undefined when calling getFriendsFollowingList.');
        }

        if (requestParameters.include_ext_verified_type === null || requestParameters.include_ext_verified_type === undefined) {
            throw new runtime.RequiredError('include_ext_verified_type','Required parameter requestParameters.include_ext_verified_type was null or undefined when calling getFriendsFollowingList.');
        }

        if (requestParameters.include_ext_profile_image_shape === null || requestParameters.include_ext_profile_image_shape === undefined) {
            throw new runtime.RequiredError('include_ext_profile_image_shape','Required parameter requestParameters.include_ext_profile_image_shape was null or undefined when calling getFriendsFollowingList.');
        }

        if (requestParameters.skip_status === null || requestParameters.skip_status === undefined) {
            throw new runtime.RequiredError('skip_status','Required parameter requestParameters.skip_status was null or undefined when calling getFriendsFollowingList.');
        }

        if (requestParameters.cursor === null || requestParameters.cursor === undefined) {
            throw new runtime.RequiredError('cursor','Required parameter requestParameters.cursor was null or undefined when calling getFriendsFollowingList.');
        }

        if (requestParameters.user_id === null || requestParameters.user_id === undefined) {
            throw new runtime.RequiredError('user_id','Required parameter requestParameters.user_id was null or undefined when calling getFriendsFollowingList.');
        }

        if (requestParameters.count === null || requestParameters.count === undefined) {
            throw new runtime.RequiredError('count','Required parameter requestParameters.count was null or undefined when calling getFriendsFollowingList.');
        }

        if (requestParameters.with_total_count === null || requestParameters.with_total_count === undefined) {
            throw new runtime.RequiredError('with_total_count','Required parameter requestParameters.with_total_count was null or undefined when calling getFriendsFollowingList.');
        }

        const queryParameters: any = {};

        if (requestParameters.include_profile_interstitial_type !== undefined) {
            queryParameters['include_profile_interstitial_type'] = requestParameters.include_profile_interstitial_type;
        }

        if (requestParameters.include_blocking !== undefined) {
            queryParameters['include_blocking'] = requestParameters.include_blocking;
        }

        if (requestParameters.include_blocked_by !== undefined) {
            queryParameters['include_blocked_by'] = requestParameters.include_blocked_by;
        }

        if (requestParameters.include_followed_by !== undefined) {
            queryParameters['include_followed_by'] = requestParameters.include_followed_by;
        }

        if (requestParameters.include_want_retweets !== undefined) {
            queryParameters['include_want_retweets'] = requestParameters.include_want_retweets;
        }

        if (requestParameters.include_mute_edge !== undefined) {
            queryParameters['include_mute_edge'] = requestParameters.include_mute_edge;
        }

        if (requestParameters.include_can_dm !== undefined) {
            queryParameters['include_can_dm'] = requestParameters.include_can_dm;
        }

        if (requestParameters.include_can_media_tag !== undefined) {
            queryParameters['include_can_media_tag'] = requestParameters.include_can_media_tag;
        }

        if (requestParameters.include_ext_has_nft_avatar !== undefined) {
            queryParameters['include_ext_has_nft_avatar'] = requestParameters.include_ext_has_nft_avatar;
        }

        if (requestParameters.include_ext_is_blue_verified !== undefined) {
            queryParameters['include_ext_is_blue_verified'] = requestParameters.include_ext_is_blue_verified;
        }

        if (requestParameters.include_ext_verified_type !== undefined) {
            queryParameters['include_ext_verified_type'] = requestParameters.include_ext_verified_type;
        }

        if (requestParameters.include_ext_profile_image_shape !== undefined) {
            queryParameters['include_ext_profile_image_shape'] = requestParameters.include_ext_profile_image_shape;
        }

        if (requestParameters.skip_status !== undefined) {
            queryParameters['skip_status'] = requestParameters.skip_status;
        }

        if (requestParameters.cursor !== undefined) {
            queryParameters['cursor'] = requestParameters.cursor;
        }

        if (requestParameters.user_id !== undefined) {
            queryParameters['user_id'] = requestParameters.user_id;
        }

        if (requestParameters.count !== undefined) {
            queryParameters['count'] = requestParameters.count;
        }

        if (requestParameters.with_total_count !== undefined) {
            queryParameters['with_total_count'] = requestParameters.with_total_count;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-twitter-client-language"] = this.configuration.apiKey("x-twitter-client-language"); // ClientLanguage authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-twitter-active-user"] = this.configuration.apiKey("x-twitter-active-user"); // ActiveUser authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["user-agent"] = this.configuration.apiKey("user-agent"); // UserAgent authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-twitter-auth-type"] = this.configuration.apiKey("x-twitter-auth-type"); // AuthType authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-csrf-token"] = this.configuration.apiKey("x-csrf-token"); // CsrfToken authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/1.1/friends/following/list.json`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * get friends following list
     */
    async getFriendsFollowingList(requestParameters: GetFriendsFollowingListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.getFriendsFollowingListRaw(requestParameters, initOverrides);
    }

    /**
     * get search typeahead
     */
    async getSearchTypeaheadRaw(requestParameters: GetSearchTypeaheadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.include_ext_is_blue_verified === null || requestParameters.include_ext_is_blue_verified === undefined) {
            throw new runtime.RequiredError('include_ext_is_blue_verified','Required parameter requestParameters.include_ext_is_blue_verified was null or undefined when calling getSearchTypeahead.');
        }

        if (requestParameters.include_ext_verified_type === null || requestParameters.include_ext_verified_type === undefined) {
            throw new runtime.RequiredError('include_ext_verified_type','Required parameter requestParameters.include_ext_verified_type was null or undefined when calling getSearchTypeahead.');
        }

        if (requestParameters.include_ext_profile_image_shape === null || requestParameters.include_ext_profile_image_shape === undefined) {
            throw new runtime.RequiredError('include_ext_profile_image_shape','Required parameter requestParameters.include_ext_profile_image_shape was null or undefined when calling getSearchTypeahead.');
        }

        if (requestParameters.q === null || requestParameters.q === undefined) {
            throw new runtime.RequiredError('q','Required parameter requestParameters.q was null or undefined when calling getSearchTypeahead.');
        }

        if (requestParameters.src === null || requestParameters.src === undefined) {
            throw new runtime.RequiredError('src','Required parameter requestParameters.src was null or undefined when calling getSearchTypeahead.');
        }

        if (requestParameters.result_type === null || requestParameters.result_type === undefined) {
            throw new runtime.RequiredError('result_type','Required parameter requestParameters.result_type was null or undefined when calling getSearchTypeahead.');
        }

        const queryParameters: any = {};

        if (requestParameters.include_ext_is_blue_verified !== undefined) {
            queryParameters['include_ext_is_blue_verified'] = requestParameters.include_ext_is_blue_verified;
        }

        if (requestParameters.include_ext_verified_type !== undefined) {
            queryParameters['include_ext_verified_type'] = requestParameters.include_ext_verified_type;
        }

        if (requestParameters.include_ext_profile_image_shape !== undefined) {
            queryParameters['include_ext_profile_image_shape'] = requestParameters.include_ext_profile_image_shape;
        }

        if (requestParameters.q !== undefined) {
            queryParameters['q'] = requestParameters.q;
        }

        if (requestParameters.src !== undefined) {
            queryParameters['src'] = requestParameters.src;
        }

        if (requestParameters.result_type !== undefined) {
            queryParameters['result_type'] = requestParameters.result_type;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-twitter-client-language"] = this.configuration.apiKey("x-twitter-client-language"); // ClientLanguage authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-twitter-active-user"] = this.configuration.apiKey("x-twitter-active-user"); // ActiveUser authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["user-agent"] = this.configuration.apiKey("user-agent"); // UserAgent authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-twitter-auth-type"] = this.configuration.apiKey("x-twitter-auth-type"); // AuthType authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-csrf-token"] = this.configuration.apiKey("x-csrf-token"); // CsrfToken authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/1.1/search/typeahead.json`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * get search typeahead
     */
    async getSearchTypeahead(requestParameters: GetSearchTypeaheadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.getSearchTypeaheadRaw(requestParameters, initOverrides);
    }

}
