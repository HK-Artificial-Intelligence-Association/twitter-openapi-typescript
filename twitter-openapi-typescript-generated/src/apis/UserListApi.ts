/* tslint:disable */
/* eslint-disable */
/**
 * Twitter OpenAPI
 * Twitter OpenAPI(Swagger) specification
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: yuki@yuki0311.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  FollowResponse,
} from '../models';
import {
    FollowResponseFromJSON,
    FollowResponseToJSON,
} from '../models';

export interface GetFollowersRequest {
    queryId: string;
    variables: string;
    features: string;
}

export interface GetFollowingRequest {
    queryId: string;
    variables: string;
    features: string;
}

/**
 * 
 */
export class UserListApi extends runtime.BaseAPI {

    /**
     * get user list of followers
     */
    async getFollowersRaw(requestParameters: GetFollowersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FollowResponse>> {
        if (requestParameters.queryId === null || requestParameters.queryId === undefined) {
            throw new runtime.RequiredError('queryId','Required parameter requestParameters.queryId was null or undefined when calling getFollowers.');
        }

        if (requestParameters.variables === null || requestParameters.variables === undefined) {
            throw new runtime.RequiredError('variables','Required parameter requestParameters.variables was null or undefined when calling getFollowers.');
        }

        if (requestParameters.features === null || requestParameters.features === undefined) {
            throw new runtime.RequiredError('features','Required parameter requestParameters.features was null or undefined when calling getFollowers.');
        }

        const queryParameters: any = {};

        if (requestParameters.queryId !== undefined) {
            queryParameters['queryId'] = requestParameters.queryId;
        }

        if (requestParameters.variables !== undefined) {
            queryParameters['variables'] = requestParameters.variables;
        }

        if (requestParameters.features !== undefined) {
            queryParameters['features'] = requestParameters.features;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-twitter-client-language"] = this.configuration.apiKey("x-twitter-client-language"); // ClientLanguage authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-twitter-active-user"] = this.configuration.apiKey("x-twitter-active-user"); // ActiveUser authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-csrf-token"] = this.configuration.apiKey("x-csrf-token"); // CsrfToken authentication
        }

        const response = await this.request({
            path: `/graphql/djdTXDIk2qhd4OStqlUFeQ/Followers`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FollowResponseFromJSON(jsonValue));
    }

    /**
     * get user list of followers
     */
    async getFollowers(requestParameters: GetFollowersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FollowResponse> {
        const response = await this.getFollowersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * get user list of following
     */
    async getFollowingRaw(requestParameters: GetFollowingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FollowResponse>> {
        if (requestParameters.queryId === null || requestParameters.queryId === undefined) {
            throw new runtime.RequiredError('queryId','Required parameter requestParameters.queryId was null or undefined when calling getFollowing.');
        }

        if (requestParameters.variables === null || requestParameters.variables === undefined) {
            throw new runtime.RequiredError('variables','Required parameter requestParameters.variables was null or undefined when calling getFollowing.');
        }

        if (requestParameters.features === null || requestParameters.features === undefined) {
            throw new runtime.RequiredError('features','Required parameter requestParameters.features was null or undefined when calling getFollowing.');
        }

        const queryParameters: any = {};

        if (requestParameters.queryId !== undefined) {
            queryParameters['queryId'] = requestParameters.queryId;
        }

        if (requestParameters.variables !== undefined) {
            queryParameters['variables'] = requestParameters.variables;
        }

        if (requestParameters.features !== undefined) {
            queryParameters['features'] = requestParameters.features;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-twitter-client-language"] = this.configuration.apiKey("x-twitter-client-language"); // ClientLanguage authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-twitter-active-user"] = this.configuration.apiKey("x-twitter-active-user"); // ActiveUser authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-csrf-token"] = this.configuration.apiKey("x-csrf-token"); // CsrfToken authentication
        }

        const response = await this.request({
            path: `/graphql/IWP6Zt14sARO29lJT35bBw/Following`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FollowResponseFromJSON(jsonValue));
    }

    /**
     * get user list of following
     */
    async getFollowing(requestParameters: GetFollowingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FollowResponse> {
        const response = await this.getFollowingRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
