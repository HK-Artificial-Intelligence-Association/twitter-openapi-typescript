/* tslint:disable */
/* eslint-disable */
/**
 * Twitter OpenAPI
 * Twitter OpenAPI(Swagger) specification
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: yuki@yuki0311.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';

export interface GetSearchAdaptiveRequest {
    includeProfileInterstitialType: number;
    includeBlocking: number;
    includeBlockedBy: number;
    includeFollowedBy: number;
    includeWantRetweets: number;
    includeMuteEdge: number;
    includeCanDm: number;
    includeCanMediaTag: number;
    includeExtHasNftAvatar: number;
    includeExtIsBlueVerified: number;
    includeExtVerifiedType: number;
    includeExtProfileImageShape: number;
    skipStatus: number;
    cardsPlatform: string;
    includeCards: number;
    includeExtAltText: boolean;
    includeExtLimitedActionResults: boolean;
    includeQuoteCount: boolean;
    includeReplyCount: number;
    tweetMode: string;
    includeExtViews: boolean;
    includeEntities: boolean;
    includeUserEntities: boolean;
    includeExtMediaColor: boolean;
    includeExtMediaAvailability: boolean;
    includeExtSensitiveMediaWarning: boolean;
    includeExtTrustedFriendsMetadata: boolean;
    sendErrorCodes: boolean;
    simpleQuotedTweet: boolean;
    q: string;
    querySource: string;
    count: number;
    requestContext: string;
    pc: number;
    spellingCorrections: number;
    includeExtEditControl: boolean;
    ext: string;
}

/**
 * 
 */
export class V20GetApi extends runtime.BaseAPI {

    /**
     * get search adaptive
     */
    async getSearchAdaptiveRaw(requestParameters: GetSearchAdaptiveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['includeProfileInterstitialType'] == null) {
            throw new runtime.RequiredError(
                'includeProfileInterstitialType',
                'Required parameter "includeProfileInterstitialType" was null or undefined when calling getSearchAdaptive().'
            );
        }

        if (requestParameters['includeBlocking'] == null) {
            throw new runtime.RequiredError(
                'includeBlocking',
                'Required parameter "includeBlocking" was null or undefined when calling getSearchAdaptive().'
            );
        }

        if (requestParameters['includeBlockedBy'] == null) {
            throw new runtime.RequiredError(
                'includeBlockedBy',
                'Required parameter "includeBlockedBy" was null or undefined when calling getSearchAdaptive().'
            );
        }

        if (requestParameters['includeFollowedBy'] == null) {
            throw new runtime.RequiredError(
                'includeFollowedBy',
                'Required parameter "includeFollowedBy" was null or undefined when calling getSearchAdaptive().'
            );
        }

        if (requestParameters['includeWantRetweets'] == null) {
            throw new runtime.RequiredError(
                'includeWantRetweets',
                'Required parameter "includeWantRetweets" was null or undefined when calling getSearchAdaptive().'
            );
        }

        if (requestParameters['includeMuteEdge'] == null) {
            throw new runtime.RequiredError(
                'includeMuteEdge',
                'Required parameter "includeMuteEdge" was null or undefined when calling getSearchAdaptive().'
            );
        }

        if (requestParameters['includeCanDm'] == null) {
            throw new runtime.RequiredError(
                'includeCanDm',
                'Required parameter "includeCanDm" was null or undefined when calling getSearchAdaptive().'
            );
        }

        if (requestParameters['includeCanMediaTag'] == null) {
            throw new runtime.RequiredError(
                'includeCanMediaTag',
                'Required parameter "includeCanMediaTag" was null or undefined when calling getSearchAdaptive().'
            );
        }

        if (requestParameters['includeExtHasNftAvatar'] == null) {
            throw new runtime.RequiredError(
                'includeExtHasNftAvatar',
                'Required parameter "includeExtHasNftAvatar" was null or undefined when calling getSearchAdaptive().'
            );
        }

        if (requestParameters['includeExtIsBlueVerified'] == null) {
            throw new runtime.RequiredError(
                'includeExtIsBlueVerified',
                'Required parameter "includeExtIsBlueVerified" was null or undefined when calling getSearchAdaptive().'
            );
        }

        if (requestParameters['includeExtVerifiedType'] == null) {
            throw new runtime.RequiredError(
                'includeExtVerifiedType',
                'Required parameter "includeExtVerifiedType" was null or undefined when calling getSearchAdaptive().'
            );
        }

        if (requestParameters['includeExtProfileImageShape'] == null) {
            throw new runtime.RequiredError(
                'includeExtProfileImageShape',
                'Required parameter "includeExtProfileImageShape" was null or undefined when calling getSearchAdaptive().'
            );
        }

        if (requestParameters['skipStatus'] == null) {
            throw new runtime.RequiredError(
                'skipStatus',
                'Required parameter "skipStatus" was null or undefined when calling getSearchAdaptive().'
            );
        }

        if (requestParameters['cardsPlatform'] == null) {
            throw new runtime.RequiredError(
                'cardsPlatform',
                'Required parameter "cardsPlatform" was null or undefined when calling getSearchAdaptive().'
            );
        }

        if (requestParameters['includeCards'] == null) {
            throw new runtime.RequiredError(
                'includeCards',
                'Required parameter "includeCards" was null or undefined when calling getSearchAdaptive().'
            );
        }

        if (requestParameters['includeExtAltText'] == null) {
            throw new runtime.RequiredError(
                'includeExtAltText',
                'Required parameter "includeExtAltText" was null or undefined when calling getSearchAdaptive().'
            );
        }

        if (requestParameters['includeExtLimitedActionResults'] == null) {
            throw new runtime.RequiredError(
                'includeExtLimitedActionResults',
                'Required parameter "includeExtLimitedActionResults" was null or undefined when calling getSearchAdaptive().'
            );
        }

        if (requestParameters['includeQuoteCount'] == null) {
            throw new runtime.RequiredError(
                'includeQuoteCount',
                'Required parameter "includeQuoteCount" was null or undefined when calling getSearchAdaptive().'
            );
        }

        if (requestParameters['includeReplyCount'] == null) {
            throw new runtime.RequiredError(
                'includeReplyCount',
                'Required parameter "includeReplyCount" was null or undefined when calling getSearchAdaptive().'
            );
        }

        if (requestParameters['tweetMode'] == null) {
            throw new runtime.RequiredError(
                'tweetMode',
                'Required parameter "tweetMode" was null or undefined when calling getSearchAdaptive().'
            );
        }

        if (requestParameters['includeExtViews'] == null) {
            throw new runtime.RequiredError(
                'includeExtViews',
                'Required parameter "includeExtViews" was null or undefined when calling getSearchAdaptive().'
            );
        }

        if (requestParameters['includeEntities'] == null) {
            throw new runtime.RequiredError(
                'includeEntities',
                'Required parameter "includeEntities" was null or undefined when calling getSearchAdaptive().'
            );
        }

        if (requestParameters['includeUserEntities'] == null) {
            throw new runtime.RequiredError(
                'includeUserEntities',
                'Required parameter "includeUserEntities" was null or undefined when calling getSearchAdaptive().'
            );
        }

        if (requestParameters['includeExtMediaColor'] == null) {
            throw new runtime.RequiredError(
                'includeExtMediaColor',
                'Required parameter "includeExtMediaColor" was null or undefined when calling getSearchAdaptive().'
            );
        }

        if (requestParameters['includeExtMediaAvailability'] == null) {
            throw new runtime.RequiredError(
                'includeExtMediaAvailability',
                'Required parameter "includeExtMediaAvailability" was null or undefined when calling getSearchAdaptive().'
            );
        }

        if (requestParameters['includeExtSensitiveMediaWarning'] == null) {
            throw new runtime.RequiredError(
                'includeExtSensitiveMediaWarning',
                'Required parameter "includeExtSensitiveMediaWarning" was null or undefined when calling getSearchAdaptive().'
            );
        }

        if (requestParameters['includeExtTrustedFriendsMetadata'] == null) {
            throw new runtime.RequiredError(
                'includeExtTrustedFriendsMetadata',
                'Required parameter "includeExtTrustedFriendsMetadata" was null or undefined when calling getSearchAdaptive().'
            );
        }

        if (requestParameters['sendErrorCodes'] == null) {
            throw new runtime.RequiredError(
                'sendErrorCodes',
                'Required parameter "sendErrorCodes" was null or undefined when calling getSearchAdaptive().'
            );
        }

        if (requestParameters['simpleQuotedTweet'] == null) {
            throw new runtime.RequiredError(
                'simpleQuotedTweet',
                'Required parameter "simpleQuotedTweet" was null or undefined when calling getSearchAdaptive().'
            );
        }

        if (requestParameters['q'] == null) {
            throw new runtime.RequiredError(
                'q',
                'Required parameter "q" was null or undefined when calling getSearchAdaptive().'
            );
        }

        if (requestParameters['querySource'] == null) {
            throw new runtime.RequiredError(
                'querySource',
                'Required parameter "querySource" was null or undefined when calling getSearchAdaptive().'
            );
        }

        if (requestParameters['count'] == null) {
            throw new runtime.RequiredError(
                'count',
                'Required parameter "count" was null or undefined when calling getSearchAdaptive().'
            );
        }

        if (requestParameters['requestContext'] == null) {
            throw new runtime.RequiredError(
                'requestContext',
                'Required parameter "requestContext" was null or undefined when calling getSearchAdaptive().'
            );
        }

        if (requestParameters['pc'] == null) {
            throw new runtime.RequiredError(
                'pc',
                'Required parameter "pc" was null or undefined when calling getSearchAdaptive().'
            );
        }

        if (requestParameters['spellingCorrections'] == null) {
            throw new runtime.RequiredError(
                'spellingCorrections',
                'Required parameter "spellingCorrections" was null or undefined when calling getSearchAdaptive().'
            );
        }

        if (requestParameters['includeExtEditControl'] == null) {
            throw new runtime.RequiredError(
                'includeExtEditControl',
                'Required parameter "includeExtEditControl" was null or undefined when calling getSearchAdaptive().'
            );
        }

        if (requestParameters['ext'] == null) {
            throw new runtime.RequiredError(
                'ext',
                'Required parameter "ext" was null or undefined when calling getSearchAdaptive().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['includeProfileInterstitialType'] != null) {
            queryParameters['include_profile_interstitial_type'] = requestParameters['includeProfileInterstitialType'];
        }

        if (requestParameters['includeBlocking'] != null) {
            queryParameters['include_blocking'] = requestParameters['includeBlocking'];
        }

        if (requestParameters['includeBlockedBy'] != null) {
            queryParameters['include_blocked_by'] = requestParameters['includeBlockedBy'];
        }

        if (requestParameters['includeFollowedBy'] != null) {
            queryParameters['include_followed_by'] = requestParameters['includeFollowedBy'];
        }

        if (requestParameters['includeWantRetweets'] != null) {
            queryParameters['include_want_retweets'] = requestParameters['includeWantRetweets'];
        }

        if (requestParameters['includeMuteEdge'] != null) {
            queryParameters['include_mute_edge'] = requestParameters['includeMuteEdge'];
        }

        if (requestParameters['includeCanDm'] != null) {
            queryParameters['include_can_dm'] = requestParameters['includeCanDm'];
        }

        if (requestParameters['includeCanMediaTag'] != null) {
            queryParameters['include_can_media_tag'] = requestParameters['includeCanMediaTag'];
        }

        if (requestParameters['includeExtHasNftAvatar'] != null) {
            queryParameters['include_ext_has_nft_avatar'] = requestParameters['includeExtHasNftAvatar'];
        }

        if (requestParameters['includeExtIsBlueVerified'] != null) {
            queryParameters['include_ext_is_blue_verified'] = requestParameters['includeExtIsBlueVerified'];
        }

        if (requestParameters['includeExtVerifiedType'] != null) {
            queryParameters['include_ext_verified_type'] = requestParameters['includeExtVerifiedType'];
        }

        if (requestParameters['includeExtProfileImageShape'] != null) {
            queryParameters['include_ext_profile_image_shape'] = requestParameters['includeExtProfileImageShape'];
        }

        if (requestParameters['skipStatus'] != null) {
            queryParameters['skip_status'] = requestParameters['skipStatus'];
        }

        if (requestParameters['cardsPlatform'] != null) {
            queryParameters['cards_platform'] = requestParameters['cardsPlatform'];
        }

        if (requestParameters['includeCards'] != null) {
            queryParameters['include_cards'] = requestParameters['includeCards'];
        }

        if (requestParameters['includeExtAltText'] != null) {
            queryParameters['include_ext_alt_text'] = requestParameters['includeExtAltText'];
        }

        if (requestParameters['includeExtLimitedActionResults'] != null) {
            queryParameters['include_ext_limited_action_results'] = requestParameters['includeExtLimitedActionResults'];
        }

        if (requestParameters['includeQuoteCount'] != null) {
            queryParameters['include_quote_count'] = requestParameters['includeQuoteCount'];
        }

        if (requestParameters['includeReplyCount'] != null) {
            queryParameters['include_reply_count'] = requestParameters['includeReplyCount'];
        }

        if (requestParameters['tweetMode'] != null) {
            queryParameters['tweet_mode'] = requestParameters['tweetMode'];
        }

        if (requestParameters['includeExtViews'] != null) {
            queryParameters['include_ext_views'] = requestParameters['includeExtViews'];
        }

        if (requestParameters['includeEntities'] != null) {
            queryParameters['include_entities'] = requestParameters['includeEntities'];
        }

        if (requestParameters['includeUserEntities'] != null) {
            queryParameters['include_user_entities'] = requestParameters['includeUserEntities'];
        }

        if (requestParameters['includeExtMediaColor'] != null) {
            queryParameters['include_ext_media_color'] = requestParameters['includeExtMediaColor'];
        }

        if (requestParameters['includeExtMediaAvailability'] != null) {
            queryParameters['include_ext_media_availability'] = requestParameters['includeExtMediaAvailability'];
        }

        if (requestParameters['includeExtSensitiveMediaWarning'] != null) {
            queryParameters['include_ext_sensitive_media_warning'] = requestParameters['includeExtSensitiveMediaWarning'];
        }

        if (requestParameters['includeExtTrustedFriendsMetadata'] != null) {
            queryParameters['include_ext_trusted_friends_metadata'] = requestParameters['includeExtTrustedFriendsMetadata'];
        }

        if (requestParameters['sendErrorCodes'] != null) {
            queryParameters['send_error_codes'] = requestParameters['sendErrorCodes'];
        }

        if (requestParameters['simpleQuotedTweet'] != null) {
            queryParameters['simple_quoted_tweet'] = requestParameters['simpleQuotedTweet'];
        }

        if (requestParameters['q'] != null) {
            queryParameters['q'] = requestParameters['q'];
        }

        if (requestParameters['querySource'] != null) {
            queryParameters['query_source'] = requestParameters['querySource'];
        }

        if (requestParameters['count'] != null) {
            queryParameters['count'] = requestParameters['count'];
        }

        if (requestParameters['requestContext'] != null) {
            queryParameters['requestContext'] = requestParameters['requestContext'];
        }

        if (requestParameters['pc'] != null) {
            queryParameters['pc'] = requestParameters['pc'];
        }

        if (requestParameters['spellingCorrections'] != null) {
            queryParameters['spelling_corrections'] = requestParameters['spellingCorrections'];
        }

        if (requestParameters['includeExtEditControl'] != null) {
            queryParameters['include_ext_edit_control'] = requestParameters['includeExtEditControl'];
        }

        if (requestParameters['ext'] != null) {
            queryParameters['ext'] = requestParameters['ext'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-twitter-client-language"] = await this.configuration.apiKey("x-twitter-client-language"); // ClientLanguage authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Accept"] = await this.configuration.apiKey("Accept"); // Accept authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Priority"] = await this.configuration.apiKey("Priority"); // Priority authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Sec-Fetch-Dest"] = await this.configuration.apiKey("Sec-Fetch-Dest"); // SecFetchDest authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Referer"] = await this.configuration.apiKey("Referer"); // Referer authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Sec-Ch-Ua-Platform"] = await this.configuration.apiKey("Sec-Ch-Ua-Platform"); // SecChUaPlatform authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Sec-Fetch-Mode"] = await this.configuration.apiKey("Sec-Fetch-Mode"); // SecFetchMode authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-csrf-token"] = await this.configuration.apiKey("x-csrf-token"); // CsrfToken authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-guest-token"] = await this.configuration.apiKey("x-guest-token"); // GuestToken authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Sec-Ch-Ua"] = await this.configuration.apiKey("Sec-Ch-Ua"); // SecChUa authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-twitter-active-user"] = await this.configuration.apiKey("x-twitter-active-user"); // ActiveUser authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["user-agent"] = await this.configuration.apiKey("user-agent"); // UserAgent authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Accept-Language"] = await this.configuration.apiKey("Accept-Language"); // AcceptLanguage authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Sec-Fetch-Site"] = await this.configuration.apiKey("Sec-Fetch-Site"); // SecFetchSite authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-twitter-auth-type"] = await this.configuration.apiKey("x-twitter-auth-type"); // AuthType authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Sec-Ch-Ua-Mobile"] = await this.configuration.apiKey("Sec-Ch-Ua-Mobile"); // SecChUaMobile authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Accept-Encoding"] = await this.configuration.apiKey("Accept-Encoding"); // AcceptEncoding authentication
        }

        const response = await this.request({
            path: `/2/search/adaptive.json`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * get search adaptive
     */
    async getSearchAdaptive(requestParameters: GetSearchAdaptiveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.getSearchAdaptiveRaw(requestParameters, initOverrides);
    }

}
