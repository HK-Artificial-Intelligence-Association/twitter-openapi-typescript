/* tslint:disable */
/* eslint-disable */
/**
 * Twitter OpenAPI
 * Twitter OpenAPI(Swagger) specification
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: yuki@yuki0311.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';

export interface PostCreateFriendshipsRequest {
    include_blocked_by: number;
    include_blocking: number;
    include_can_dm: number;
    include_can_media_tag: number;
    include_ext_has_nft_avatar: number;
    include_ext_is_blue_verified: number;
    include_ext_profile_image_shape: number;
    include_ext_verified_type: number;
    include_followed_by: number;
    include_mute_edge: number;
    include_profile_interstitial_type: number;
    include_want_retweets: number;
    skip_status: number;
    user_id: string;
}

export interface PostDestroyFriendshipsRequest {
    include_blocked_by: number;
    include_blocking: number;
    include_can_dm: number;
    include_can_media_tag: number;
    include_ext_has_nft_avatar: number;
    include_ext_is_blue_verified: number;
    include_ext_profile_image_shape: number;
    include_ext_verified_type: number;
    include_followed_by: number;
    include_mute_edge: number;
    include_profile_interstitial_type: number;
    include_want_retweets: number;
    skip_status: number;
    user_id: string;
}

/**
 * 
 */
export class V11PostApi extends runtime.BaseAPI {

    /**
     * post create friendships
     */
    async postCreateFriendshipsRaw(requestParameters: PostCreateFriendshipsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.include_blocked_by === null || requestParameters.include_blocked_by === undefined) {
            throw new runtime.RequiredError('include_blocked_by','Required parameter requestParameters.include_blocked_by was null or undefined when calling postCreateFriendships.');
        }

        if (requestParameters.include_blocking === null || requestParameters.include_blocking === undefined) {
            throw new runtime.RequiredError('include_blocking','Required parameter requestParameters.include_blocking was null or undefined when calling postCreateFriendships.');
        }

        if (requestParameters.include_can_dm === null || requestParameters.include_can_dm === undefined) {
            throw new runtime.RequiredError('include_can_dm','Required parameter requestParameters.include_can_dm was null or undefined when calling postCreateFriendships.');
        }

        if (requestParameters.include_can_media_tag === null || requestParameters.include_can_media_tag === undefined) {
            throw new runtime.RequiredError('include_can_media_tag','Required parameter requestParameters.include_can_media_tag was null or undefined when calling postCreateFriendships.');
        }

        if (requestParameters.include_ext_has_nft_avatar === null || requestParameters.include_ext_has_nft_avatar === undefined) {
            throw new runtime.RequiredError('include_ext_has_nft_avatar','Required parameter requestParameters.include_ext_has_nft_avatar was null or undefined when calling postCreateFriendships.');
        }

        if (requestParameters.include_ext_is_blue_verified === null || requestParameters.include_ext_is_blue_verified === undefined) {
            throw new runtime.RequiredError('include_ext_is_blue_verified','Required parameter requestParameters.include_ext_is_blue_verified was null or undefined when calling postCreateFriendships.');
        }

        if (requestParameters.include_ext_profile_image_shape === null || requestParameters.include_ext_profile_image_shape === undefined) {
            throw new runtime.RequiredError('include_ext_profile_image_shape','Required parameter requestParameters.include_ext_profile_image_shape was null or undefined when calling postCreateFriendships.');
        }

        if (requestParameters.include_ext_verified_type === null || requestParameters.include_ext_verified_type === undefined) {
            throw new runtime.RequiredError('include_ext_verified_type','Required parameter requestParameters.include_ext_verified_type was null or undefined when calling postCreateFriendships.');
        }

        if (requestParameters.include_followed_by === null || requestParameters.include_followed_by === undefined) {
            throw new runtime.RequiredError('include_followed_by','Required parameter requestParameters.include_followed_by was null or undefined when calling postCreateFriendships.');
        }

        if (requestParameters.include_mute_edge === null || requestParameters.include_mute_edge === undefined) {
            throw new runtime.RequiredError('include_mute_edge','Required parameter requestParameters.include_mute_edge was null or undefined when calling postCreateFriendships.');
        }

        if (requestParameters.include_profile_interstitial_type === null || requestParameters.include_profile_interstitial_type === undefined) {
            throw new runtime.RequiredError('include_profile_interstitial_type','Required parameter requestParameters.include_profile_interstitial_type was null or undefined when calling postCreateFriendships.');
        }

        if (requestParameters.include_want_retweets === null || requestParameters.include_want_retweets === undefined) {
            throw new runtime.RequiredError('include_want_retweets','Required parameter requestParameters.include_want_retweets was null or undefined when calling postCreateFriendships.');
        }

        if (requestParameters.skip_status === null || requestParameters.skip_status === undefined) {
            throw new runtime.RequiredError('skip_status','Required parameter requestParameters.skip_status was null or undefined when calling postCreateFriendships.');
        }

        if (requestParameters.user_id === null || requestParameters.user_id === undefined) {
            throw new runtime.RequiredError('user_id','Required parameter requestParameters.user_id was null or undefined when calling postCreateFriendships.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-twitter-client-language"] = this.configuration.apiKey("x-twitter-client-language"); // ClientLanguage authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-twitter-active-user"] = this.configuration.apiKey("x-twitter-active-user"); // ActiveUser authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["user-agent"] = this.configuration.apiKey("user-agent"); // UserAgent authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-twitter-auth-type"] = this.configuration.apiKey("x-twitter-auth-type"); // AuthType authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-csrf-token"] = this.configuration.apiKey("x-csrf-token"); // CsrfToken authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const consumes: runtime.Consume[] = [
            { contentType: 'application/x-www-form-urlencoded' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.include_blocked_by !== undefined) {
            formParams.append('include_blocked_by', requestParameters.include_blocked_by as any);
        }

        if (requestParameters.include_blocking !== undefined) {
            formParams.append('include_blocking', requestParameters.include_blocking as any);
        }

        if (requestParameters.include_can_dm !== undefined) {
            formParams.append('include_can_dm', requestParameters.include_can_dm as any);
        }

        if (requestParameters.include_can_media_tag !== undefined) {
            formParams.append('include_can_media_tag', requestParameters.include_can_media_tag as any);
        }

        if (requestParameters.include_ext_has_nft_avatar !== undefined) {
            formParams.append('include_ext_has_nft_avatar', requestParameters.include_ext_has_nft_avatar as any);
        }

        if (requestParameters.include_ext_is_blue_verified !== undefined) {
            formParams.append('include_ext_is_blue_verified', requestParameters.include_ext_is_blue_verified as any);
        }

        if (requestParameters.include_ext_profile_image_shape !== undefined) {
            formParams.append('include_ext_profile_image_shape', requestParameters.include_ext_profile_image_shape as any);
        }

        if (requestParameters.include_ext_verified_type !== undefined) {
            formParams.append('include_ext_verified_type', requestParameters.include_ext_verified_type as any);
        }

        if (requestParameters.include_followed_by !== undefined) {
            formParams.append('include_followed_by', requestParameters.include_followed_by as any);
        }

        if (requestParameters.include_mute_edge !== undefined) {
            formParams.append('include_mute_edge', requestParameters.include_mute_edge as any);
        }

        if (requestParameters.include_profile_interstitial_type !== undefined) {
            formParams.append('include_profile_interstitial_type', requestParameters.include_profile_interstitial_type as any);
        }

        if (requestParameters.include_want_retweets !== undefined) {
            formParams.append('include_want_retweets', requestParameters.include_want_retweets as any);
        }

        if (requestParameters.skip_status !== undefined) {
            formParams.append('skip_status', requestParameters.skip_status as any);
        }

        if (requestParameters.user_id !== undefined) {
            formParams.append('user_id', requestParameters.user_id as any);
        }

        const response = await this.request({
            path: `/1.1/friendships/create.json`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * post create friendships
     */
    async postCreateFriendships(requestParameters: PostCreateFriendshipsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postCreateFriendshipsRaw(requestParameters, initOverrides);
    }

    /**
     * post destroy friendships
     */
    async postDestroyFriendshipsRaw(requestParameters: PostDestroyFriendshipsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.include_blocked_by === null || requestParameters.include_blocked_by === undefined) {
            throw new runtime.RequiredError('include_blocked_by','Required parameter requestParameters.include_blocked_by was null or undefined when calling postDestroyFriendships.');
        }

        if (requestParameters.include_blocking === null || requestParameters.include_blocking === undefined) {
            throw new runtime.RequiredError('include_blocking','Required parameter requestParameters.include_blocking was null or undefined when calling postDestroyFriendships.');
        }

        if (requestParameters.include_can_dm === null || requestParameters.include_can_dm === undefined) {
            throw new runtime.RequiredError('include_can_dm','Required parameter requestParameters.include_can_dm was null or undefined when calling postDestroyFriendships.');
        }

        if (requestParameters.include_can_media_tag === null || requestParameters.include_can_media_tag === undefined) {
            throw new runtime.RequiredError('include_can_media_tag','Required parameter requestParameters.include_can_media_tag was null or undefined when calling postDestroyFriendships.');
        }

        if (requestParameters.include_ext_has_nft_avatar === null || requestParameters.include_ext_has_nft_avatar === undefined) {
            throw new runtime.RequiredError('include_ext_has_nft_avatar','Required parameter requestParameters.include_ext_has_nft_avatar was null or undefined when calling postDestroyFriendships.');
        }

        if (requestParameters.include_ext_is_blue_verified === null || requestParameters.include_ext_is_blue_verified === undefined) {
            throw new runtime.RequiredError('include_ext_is_blue_verified','Required parameter requestParameters.include_ext_is_blue_verified was null or undefined when calling postDestroyFriendships.');
        }

        if (requestParameters.include_ext_profile_image_shape === null || requestParameters.include_ext_profile_image_shape === undefined) {
            throw new runtime.RequiredError('include_ext_profile_image_shape','Required parameter requestParameters.include_ext_profile_image_shape was null or undefined when calling postDestroyFriendships.');
        }

        if (requestParameters.include_ext_verified_type === null || requestParameters.include_ext_verified_type === undefined) {
            throw new runtime.RequiredError('include_ext_verified_type','Required parameter requestParameters.include_ext_verified_type was null or undefined when calling postDestroyFriendships.');
        }

        if (requestParameters.include_followed_by === null || requestParameters.include_followed_by === undefined) {
            throw new runtime.RequiredError('include_followed_by','Required parameter requestParameters.include_followed_by was null or undefined when calling postDestroyFriendships.');
        }

        if (requestParameters.include_mute_edge === null || requestParameters.include_mute_edge === undefined) {
            throw new runtime.RequiredError('include_mute_edge','Required parameter requestParameters.include_mute_edge was null or undefined when calling postDestroyFriendships.');
        }

        if (requestParameters.include_profile_interstitial_type === null || requestParameters.include_profile_interstitial_type === undefined) {
            throw new runtime.RequiredError('include_profile_interstitial_type','Required parameter requestParameters.include_profile_interstitial_type was null or undefined when calling postDestroyFriendships.');
        }

        if (requestParameters.include_want_retweets === null || requestParameters.include_want_retweets === undefined) {
            throw new runtime.RequiredError('include_want_retweets','Required parameter requestParameters.include_want_retweets was null or undefined when calling postDestroyFriendships.');
        }

        if (requestParameters.skip_status === null || requestParameters.skip_status === undefined) {
            throw new runtime.RequiredError('skip_status','Required parameter requestParameters.skip_status was null or undefined when calling postDestroyFriendships.');
        }

        if (requestParameters.user_id === null || requestParameters.user_id === undefined) {
            throw new runtime.RequiredError('user_id','Required parameter requestParameters.user_id was null or undefined when calling postDestroyFriendships.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-twitter-client-language"] = this.configuration.apiKey("x-twitter-client-language"); // ClientLanguage authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-twitter-active-user"] = this.configuration.apiKey("x-twitter-active-user"); // ActiveUser authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["user-agent"] = this.configuration.apiKey("user-agent"); // UserAgent authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-twitter-auth-type"] = this.configuration.apiKey("x-twitter-auth-type"); // AuthType authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-csrf-token"] = this.configuration.apiKey("x-csrf-token"); // CsrfToken authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const consumes: runtime.Consume[] = [
            { contentType: 'application/x-www-form-urlencoded' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.include_blocked_by !== undefined) {
            formParams.append('include_blocked_by', requestParameters.include_blocked_by as any);
        }

        if (requestParameters.include_blocking !== undefined) {
            formParams.append('include_blocking', requestParameters.include_blocking as any);
        }

        if (requestParameters.include_can_dm !== undefined) {
            formParams.append('include_can_dm', requestParameters.include_can_dm as any);
        }

        if (requestParameters.include_can_media_tag !== undefined) {
            formParams.append('include_can_media_tag', requestParameters.include_can_media_tag as any);
        }

        if (requestParameters.include_ext_has_nft_avatar !== undefined) {
            formParams.append('include_ext_has_nft_avatar', requestParameters.include_ext_has_nft_avatar as any);
        }

        if (requestParameters.include_ext_is_blue_verified !== undefined) {
            formParams.append('include_ext_is_blue_verified', requestParameters.include_ext_is_blue_verified as any);
        }

        if (requestParameters.include_ext_profile_image_shape !== undefined) {
            formParams.append('include_ext_profile_image_shape', requestParameters.include_ext_profile_image_shape as any);
        }

        if (requestParameters.include_ext_verified_type !== undefined) {
            formParams.append('include_ext_verified_type', requestParameters.include_ext_verified_type as any);
        }

        if (requestParameters.include_followed_by !== undefined) {
            formParams.append('include_followed_by', requestParameters.include_followed_by as any);
        }

        if (requestParameters.include_mute_edge !== undefined) {
            formParams.append('include_mute_edge', requestParameters.include_mute_edge as any);
        }

        if (requestParameters.include_profile_interstitial_type !== undefined) {
            formParams.append('include_profile_interstitial_type', requestParameters.include_profile_interstitial_type as any);
        }

        if (requestParameters.include_want_retweets !== undefined) {
            formParams.append('include_want_retweets', requestParameters.include_want_retweets as any);
        }

        if (requestParameters.skip_status !== undefined) {
            formParams.append('skip_status', requestParameters.skip_status as any);
        }

        if (requestParameters.user_id !== undefined) {
            formParams.append('user_id', requestParameters.user_id as any);
        }

        const response = await this.request({
            path: `/1.1/friendships/destroy.json`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * post destroy friendships
     */
    async postDestroyFriendships(requestParameters: PostDestroyFriendshipsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postDestroyFriendshipsRaw(requestParameters, initOverrides);
    }

}
