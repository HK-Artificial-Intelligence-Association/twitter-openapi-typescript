/* tslint:disable */
/* eslint-disable */
/**
 * Twitter OpenAPI
 * Twitter OpenAPI(Swagger) specification
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: yuki@yuki0311.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { UserResultCore } from './UserResultCore';
import {
    UserResultCoreFromJSON,
    UserResultCoreFromJSONTyped,
    UserResultCoreToJSON,
} from './UserResultCore';
import type { AdditionalMediaInfoCallToActions } from './AdditionalMediaInfoCallToActions';
import {
    AdditionalMediaInfoCallToActionsFromJSON,
    AdditionalMediaInfoCallToActionsFromJSONTyped,
    AdditionalMediaInfoCallToActionsToJSON,
} from './AdditionalMediaInfoCallToActions';

/**
 * 
 * @export
 * @interface AdditionalMediaInfo
 */
export interface AdditionalMediaInfo {
    /**
     * 
     * @type {AdditionalMediaInfoCallToActions}
     * @memberof AdditionalMediaInfo
     */
    callToActions?: AdditionalMediaInfoCallToActions;
    /**
     * 
     * @type {string}
     * @memberof AdditionalMediaInfo
     */
    description?: string;
    /**
     * 
     * @type {boolean}
     * @memberof AdditionalMediaInfo
     */
    embeddable?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof AdditionalMediaInfo
     */
    monetizable: boolean;
    /**
     * 
     * @type {UserResultCore}
     * @memberof AdditionalMediaInfo
     */
    sourceUser?: UserResultCore;
    /**
     * 
     * @type {string}
     * @memberof AdditionalMediaInfo
     */
    title?: string;
}

/**
 * Check if a given object implements the AdditionalMediaInfo interface.
 */
export function instanceOfAdditionalMediaInfo(value: object): value is AdditionalMediaInfo {
    if (!('monetizable' in value) || value['monetizable'] === undefined) return false;
    return true;
}

export function AdditionalMediaInfoFromJSON(json: any): AdditionalMediaInfo {
    return AdditionalMediaInfoFromJSONTyped(json, false);
}

export function AdditionalMediaInfoFromJSONTyped(json: any, ignoreDiscriminator: boolean): AdditionalMediaInfo {
    if (json == null) {
        return json;
    }
    return {
        
        'callToActions': json['call_to_actions'] == null ? undefined : AdditionalMediaInfoCallToActionsFromJSON(json['call_to_actions']),
        'description': json['description'] == null ? undefined : json['description'],
        'embeddable': json['embeddable'] == null ? undefined : json['embeddable'],
        'monetizable': json['monetizable'],
        'sourceUser': json['source_user'] == null ? undefined : UserResultCoreFromJSON(json['source_user']),
        'title': json['title'] == null ? undefined : json['title'],
    };
}

export function AdditionalMediaInfoToJSON(value?: AdditionalMediaInfo | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'call_to_actions': AdditionalMediaInfoCallToActionsToJSON(value['callToActions']),
        'description': value['description'],
        'embeddable': value['embeddable'],
        'monetizable': value['monetizable'],
        'source_user': UserResultCoreToJSON(value['sourceUser']),
        'title': value['title'],
    };
}

