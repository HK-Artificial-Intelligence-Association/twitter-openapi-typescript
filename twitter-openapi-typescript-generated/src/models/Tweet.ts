/* tslint:disable */
/* eslint-disable */
/**
 * Twitter OpenAPI
 * Twitter OpenAPI(Swagger) specification
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: yuki@yuki0311.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { AuthorCommunityRelationship } from './AuthorCommunityRelationship';
import {
    AuthorCommunityRelationshipFromJSON,
    AuthorCommunityRelationshipFromJSONTyped,
    AuthorCommunityRelationshipToJSON,
} from './AuthorCommunityRelationship';
import type { BirdwatchPivot } from './BirdwatchPivot';
import {
    BirdwatchPivotFromJSON,
    BirdwatchPivotFromJSONTyped,
    BirdwatchPivotToJSON,
} from './BirdwatchPivot';
import type { ItemResult } from './ItemResult';
import {
    ItemResultFromJSON,
    ItemResultFromJSONTyped,
    ItemResultToJSON,
} from './ItemResult';
import type { NoteTweet } from './NoteTweet';
import {
    NoteTweetFromJSON,
    NoteTweetFromJSONTyped,
    NoteTweetToJSON,
} from './NoteTweet';
import type { QuotedRefResult } from './QuotedRefResult';
import {
    QuotedRefResultFromJSON,
    QuotedRefResultFromJSONTyped,
    QuotedRefResultToJSON,
} from './QuotedRefResult';
import type { SuperFollowsReplyUserResult } from './SuperFollowsReplyUserResult';
import {
    SuperFollowsReplyUserResultFromJSON,
    SuperFollowsReplyUserResultFromJSONTyped,
    SuperFollowsReplyUserResultToJSON,
} from './SuperFollowsReplyUserResult';
import type { TweetCard } from './TweetCard';
import {
    TweetCardFromJSON,
    TweetCardFromJSONTyped,
    TweetCardToJSON,
} from './TweetCard';
import type { TweetEditControl } from './TweetEditControl';
import {
    TweetEditControlFromJSON,
    TweetEditControlFromJSONTyped,
    TweetEditControlToJSON,
} from './TweetEditControl';
import type { TweetEditPrespective } from './TweetEditPrespective';
import {
    TweetEditPrespectiveFromJSON,
    TweetEditPrespectiveFromJSONTyped,
    TweetEditPrespectiveToJSON,
} from './TweetEditPrespective';
import type { TweetLegacy } from './TweetLegacy';
import {
    TweetLegacyFromJSON,
    TweetLegacyFromJSONTyped,
    TweetLegacyToJSON,
} from './TweetLegacy';
import type { TweetPreviousCounts } from './TweetPreviousCounts';
import {
    TweetPreviousCountsFromJSON,
    TweetPreviousCountsFromJSONTyped,
    TweetPreviousCountsToJSON,
} from './TweetPreviousCounts';
import type { TweetView } from './TweetView';
import {
    TweetViewFromJSON,
    TweetViewFromJSONTyped,
    TweetViewToJSON,
} from './TweetView';
import type { TypeName } from './TypeName';
import {
    TypeNameFromJSON,
    TypeNameFromJSONTyped,
    TypeNameToJSON,
} from './TypeName';
import type { UnifiedCard } from './UnifiedCard';
import {
    UnifiedCardFromJSON,
    UnifiedCardFromJSONTyped,
    UnifiedCardToJSON,
} from './UnifiedCard';
import type { UserResultCore } from './UserResultCore';
import {
    UserResultCoreFromJSON,
    UserResultCoreFromJSONTyped,
    UserResultCoreToJSON,
} from './UserResultCore';

/**
 * 
 * @export
 * @interface Tweet
 */
export interface Tweet {
    /**
     * 
     * @type {TypeName}
     * @memberof Tweet
     */
    typename?: TypeName;
    /**
     * 
     * @type {AuthorCommunityRelationship}
     * @memberof Tweet
     */
    authorCommunityRelationship?: AuthorCommunityRelationship;
    /**
     * 
     * @type {BirdwatchPivot}
     * @memberof Tweet
     */
    birdwatchPivot?: BirdwatchPivot;
    /**
     * 
     * @type {TweetCard}
     * @memberof Tweet
     */
    card?: TweetCard;
    /**
     * 
     * @type {UserResultCore}
     * @memberof Tweet
     */
    core?: UserResultCore;
    /**
     * 
     * @type {TweetEditControl}
     * @memberof Tweet
     */
    editControl?: TweetEditControl;
    /**
     * 
     * @type {TweetEditPrespective}
     * @memberof Tweet
     */
    editPrespective?: TweetEditPrespective;
    /**
     * 
     * @type {boolean}
     * @memberof Tweet
     */
    hasBirdwatchNotes?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Tweet
     */
    isTranslatable?: boolean;
    /**
     * 
     * @type {TweetLegacy}
     * @memberof Tweet
     */
    legacy?: TweetLegacy;
    /**
     * 
     * @type {NoteTweet}
     * @memberof Tweet
     */
    noteTweet?: NoteTweet;
    /**
     * 
     * @type {TweetPreviousCounts}
     * @memberof Tweet
     */
    previousCounts?: TweetPreviousCounts;
    /**
     * 
     * @type {object}
     * @memberof Tweet
     */
    quickPromoteEligibility?: object;
    /**
     * 
     * @type {QuotedRefResult}
     * @memberof Tweet
     */
    quotedRefResult?: QuotedRefResult;
    /**
     * 
     * @type {ItemResult}
     * @memberof Tweet
     */
    quotedStatusResult?: ItemResult;
    /**
     * 
     * @type {string}
     * @memberof Tweet
     */
    restId: string;
    /**
     * 
     * @type {string}
     * @memberof Tweet
     */
    source?: string;
    /**
     * 
     * @type {SuperFollowsReplyUserResult}
     * @memberof Tweet
     */
    superFollowsReplyUserResult?: SuperFollowsReplyUserResult;
    /**
     * 
     * @type {UnifiedCard}
     * @memberof Tweet
     */
    unifiedCard?: UnifiedCard;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof Tweet
     */
    unmentionData?: { [key: string]: any; };
    /**
     * 
     * @type {TweetView}
     * @memberof Tweet
     */
    views?: TweetView;
}

/**
 * Check if a given object implements the Tweet interface.
 */
export function instanceOfTweet(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "restId" in value;

    return isInstance;
}

export function TweetFromJSON(json: any): Tweet {
    return TweetFromJSONTyped(json, false);
}

export function TweetFromJSONTyped(json: any, ignoreDiscriminator: boolean): Tweet {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'typename': !exists(json, '__typename') ? undefined : TypeNameFromJSON(json['__typename']),
        'authorCommunityRelationship': !exists(json, 'author_community_relationship') ? undefined : AuthorCommunityRelationshipFromJSON(json['author_community_relationship']),
        'birdwatchPivot': !exists(json, 'birdwatch_pivot') ? undefined : BirdwatchPivotFromJSON(json['birdwatch_pivot']),
        'card': !exists(json, 'card') ? undefined : TweetCardFromJSON(json['card']),
        'core': !exists(json, 'core') ? undefined : UserResultCoreFromJSON(json['core']),
        'editControl': !exists(json, 'edit_control') ? undefined : TweetEditControlFromJSON(json['edit_control']),
        'editPrespective': !exists(json, 'edit_prespective') ? undefined : TweetEditPrespectiveFromJSON(json['edit_prespective']),
        'hasBirdwatchNotes': !exists(json, 'has_birdwatch_notes') ? undefined : json['has_birdwatch_notes'],
        'isTranslatable': !exists(json, 'is_translatable') ? undefined : json['is_translatable'],
        'legacy': !exists(json, 'legacy') ? undefined : TweetLegacyFromJSON(json['legacy']),
        'noteTweet': !exists(json, 'note_tweet') ? undefined : NoteTweetFromJSON(json['note_tweet']),
        'previousCounts': !exists(json, 'previous_counts') ? undefined : TweetPreviousCountsFromJSON(json['previous_counts']),
        'quickPromoteEligibility': !exists(json, 'quick_promote_eligibility') ? undefined : json['quick_promote_eligibility'],
        'quotedRefResult': !exists(json, 'quotedRefResult') ? undefined : QuotedRefResultFromJSON(json['quotedRefResult']),
        'quotedStatusResult': !exists(json, 'quoted_status_result') ? undefined : ItemResultFromJSON(json['quoted_status_result']),
        'restId': json['rest_id'],
        'source': !exists(json, 'source') ? undefined : json['source'],
        'superFollowsReplyUserResult': !exists(json, 'superFollowsReplyUserResult') ? undefined : SuperFollowsReplyUserResultFromJSON(json['superFollowsReplyUserResult']),
        'unifiedCard': !exists(json, 'unified_card') ? undefined : UnifiedCardFromJSON(json['unified_card']),
        'unmentionData': !exists(json, 'unmention_data') ? undefined : json['unmention_data'],
        'views': !exists(json, 'views') ? undefined : TweetViewFromJSON(json['views']),
    };
}

export function TweetToJSON(value?: Tweet | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        '__typename': TypeNameToJSON(value.typename),
        'author_community_relationship': AuthorCommunityRelationshipToJSON(value.authorCommunityRelationship),
        'birdwatch_pivot': BirdwatchPivotToJSON(value.birdwatchPivot),
        'card': TweetCardToJSON(value.card),
        'core': UserResultCoreToJSON(value.core),
        'edit_control': TweetEditControlToJSON(value.editControl),
        'edit_prespective': TweetEditPrespectiveToJSON(value.editPrespective),
        'has_birdwatch_notes': value.hasBirdwatchNotes,
        'is_translatable': value.isTranslatable,
        'legacy': TweetLegacyToJSON(value.legacy),
        'note_tweet': NoteTweetToJSON(value.noteTweet),
        'previous_counts': TweetPreviousCountsToJSON(value.previousCounts),
        'quick_promote_eligibility': value.quickPromoteEligibility,
        'quotedRefResult': QuotedRefResultToJSON(value.quotedRefResult),
        'quoted_status_result': ItemResultToJSON(value.quotedStatusResult),
        'rest_id': value.restId,
        'source': value.source,
        'superFollowsReplyUserResult': SuperFollowsReplyUserResultToJSON(value.superFollowsReplyUserResult),
        'unified_card': UnifiedCardToJSON(value.unifiedCard),
        'unmention_data': value.unmentionData,
        'views': TweetViewToJSON(value.views),
    };
}

