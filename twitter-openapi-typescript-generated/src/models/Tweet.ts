/* tslint:disable */
/* eslint-disable */
/**
 * Twitter OpenAPI
 * Twitter OpenAPI(Swagger) specification
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: yuki@yuki0311.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ItemResult } from './ItemResult';
import {
    ItemResultFromJSON,
    ItemResultFromJSONTyped,
    ItemResultToJSON,
} from './ItemResult';
import type { TweetCard } from './TweetCard';
import {
    TweetCardFromJSON,
    TweetCardFromJSONTyped,
    TweetCardToJSON,
} from './TweetCard';
import type { TweetEditControl } from './TweetEditControl';
import {
    TweetEditControlFromJSON,
    TweetEditControlFromJSONTyped,
    TweetEditControlToJSON,
} from './TweetEditControl';
import type { TweetEditPrespective } from './TweetEditPrespective';
import {
    TweetEditPrespectiveFromJSON,
    TweetEditPrespectiveFromJSONTyped,
    TweetEditPrespectiveToJSON,
} from './TweetEditPrespective';
import type { TweetLegacy } from './TweetLegacy';
import {
    TweetLegacyFromJSON,
    TweetLegacyFromJSONTyped,
    TweetLegacyToJSON,
} from './TweetLegacy';
import type { TweetView } from './TweetView';
import {
    TweetViewFromJSON,
    TweetViewFromJSONTyped,
    TweetViewToJSON,
} from './TweetView';
import type { TypeName } from './TypeName';
import {
    TypeNameFromJSON,
    TypeNameFromJSONTyped,
    TypeNameToJSON,
} from './TypeName';
import type { UserResultCore } from './UserResultCore';
import {
    UserResultCoreFromJSON,
    UserResultCoreFromJSONTyped,
    UserResultCoreToJSON,
} from './UserResultCore';

/**
 * 
 * @export
 * @interface Tweet
 */
export interface Tweet {
    /**
     * 
     * @type {TypeName}
     * @memberof Tweet
     */
    typename?: TypeName;
    /**
     * 
     * @type {TweetCard}
     * @memberof Tweet
     */
    card?: TweetCard;
    /**
     * 
     * @type {UserResultCore}
     * @memberof Tweet
     */
    core?: UserResultCore;
    /**
     * 
     * @type {TweetEditControl}
     * @memberof Tweet
     */
    editControl: TweetEditControl;
    /**
     * 
     * @type {TweetEditPrespective}
     * @memberof Tweet
     */
    editPrespective?: TweetEditPrespective;
    /**
     * 
     * @type {boolean}
     * @memberof Tweet
     */
    isTranslatable: boolean;
    /**
     * 
     * @type {TweetLegacy}
     * @memberof Tweet
     */
    legacy?: TweetLegacy;
    /**
     * 
     * @type {ItemResult}
     * @memberof Tweet
     */
    quotedStatusResult?: ItemResult;
    /**
     * 
     * @type {string}
     * @memberof Tweet
     */
    restId: string;
    /**
     * 
     * @type {string}
     * @memberof Tweet
     */
    source?: string;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof Tweet
     */
    unmentionData?: { [key: string]: any; };
    /**
     * 
     * @type {TweetView}
     * @memberof Tweet
     */
    views: TweetView;
}

/**
 * Check if a given object implements the Tweet interface.
 */
export function instanceOfTweet(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "editControl" in value;
    isInstance = isInstance && "isTranslatable" in value;
    isInstance = isInstance && "restId" in value;
    isInstance = isInstance && "views" in value;

    return isInstance;
}

export function TweetFromJSON(json: any): Tweet {
    return TweetFromJSONTyped(json, false);
}

export function TweetFromJSONTyped(json: any, ignoreDiscriminator: boolean): Tweet {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'typename': !exists(json, '__typename') ? undefined : TypeNameFromJSON(json['__typename']),
        'card': !exists(json, 'card') ? undefined : TweetCardFromJSON(json['card']),
        'core': !exists(json, 'core') ? undefined : UserResultCoreFromJSON(json['core']),
        'editControl': TweetEditControlFromJSON(json['edit_control']),
        'editPrespective': !exists(json, 'edit_prespective') ? undefined : TweetEditPrespectiveFromJSON(json['edit_prespective']),
        'isTranslatable': json['is_translatable'],
        'legacy': !exists(json, 'legacy') ? undefined : TweetLegacyFromJSON(json['legacy']),
        'quotedStatusResult': !exists(json, 'quoted_status_result') ? undefined : ItemResultFromJSON(json['quoted_status_result']),
        'restId': json['rest_id'],
        'source': !exists(json, 'source') ? undefined : json['source'],
        'unmentionData': !exists(json, 'unmention_data') ? undefined : json['unmention_data'],
        'views': TweetViewFromJSON(json['views']),
    };
}

export function TweetToJSON(value?: Tweet | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        '__typename': TypeNameToJSON(value.typename),
        'card': TweetCardToJSON(value.card),
        'core': UserResultCoreToJSON(value.core),
        'edit_control': TweetEditControlToJSON(value.editControl),
        'edit_prespective': TweetEditPrespectiveToJSON(value.editPrespective),
        'is_translatable': value.isTranslatable,
        'legacy': TweetLegacyToJSON(value.legacy),
        'quoted_status_result': ItemResultToJSON(value.quotedStatusResult),
        'rest_id': value.restId,
        'source': value.source,
        'unmention_data': value.unmentionData,
        'views': TweetViewToJSON(value.views),
    };
}

