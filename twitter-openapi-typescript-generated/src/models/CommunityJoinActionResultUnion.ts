/* tslint:disable */
/* eslint-disable */
/**
 * Twitter OpenAPI
 * Twitter OpenAPI(Swagger) specification
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: yuki@yuki0311.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { CommunityJoinAction } from './CommunityJoinAction';
import {
    instanceOfCommunityJoinAction,
    CommunityJoinActionFromJSON,
    CommunityJoinActionFromJSONTyped,
    CommunityJoinActionToJSON,
} from './CommunityJoinAction';
import type { CommunityJoinActionUnavailable } from './CommunityJoinActionUnavailable';
import {
    instanceOfCommunityJoinActionUnavailable,
    CommunityJoinActionUnavailableFromJSON,
    CommunityJoinActionUnavailableFromJSONTyped,
    CommunityJoinActionUnavailableToJSON,
} from './CommunityJoinActionUnavailable';

/**
 * @type CommunityJoinActionResultUnion
 * 
 * @export
 */
export type CommunityJoinActionResultUnion = { typename: 'CommunityJoinAction' } & CommunityJoinAction | { typename: 'CommunityJoinActionUnavailable' } & CommunityJoinActionUnavailable;

export function CommunityJoinActionResultUnionFromJSON(json: any): CommunityJoinActionResultUnion {
    return CommunityJoinActionResultUnionFromJSONTyped(json, false);
}

export function CommunityJoinActionResultUnionFromJSONTyped(json: any, ignoreDiscriminator: boolean): CommunityJoinActionResultUnion {
    if (json == null) {
        return json;
    }
    switch (json['__typename']) {
        case 'CommunityJoinAction':
            return Object.assign({}, CommunityJoinActionFromJSONTyped(json, true), { typename: 'CommunityJoinAction' } as const);
        case 'CommunityJoinActionUnavailable':
            return Object.assign({}, CommunityJoinActionUnavailableFromJSONTyped(json, true), { typename: 'CommunityJoinActionUnavailable' } as const);
        default:
            throw new Error(`No variant of CommunityJoinActionResultUnion exists with 'typename=${json['typename']}'`);
    }
}

export function CommunityJoinActionResultUnionToJSON(json: any): any {
    return CommunityJoinActionResultUnionToJSONTyped(json, false);
}

export function CommunityJoinActionResultUnionToJSONTyped(value?: CommunityJoinActionResultUnion | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }
    switch (value['typename']) {
        case 'CommunityJoinAction':
            return Object.assign({}, CommunityJoinActionToJSON(value), { typename: 'CommunityJoinAction' } as const);
        case 'CommunityJoinActionUnavailable':
            return Object.assign({}, CommunityJoinActionUnavailableToJSON(value), { typename: 'CommunityJoinActionUnavailable' } as const);
        default:
            throw new Error(`No variant of CommunityJoinActionResultUnion exists with 'typename=${value['typename']}'`);
    }

}

