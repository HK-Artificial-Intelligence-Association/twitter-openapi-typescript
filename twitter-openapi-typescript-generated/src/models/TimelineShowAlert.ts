/* tslint:disable */
/* eslint-disable */
/**
 * Twitter OpenAPI
 * Twitter OpenAPI(Swagger) specification
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: yuki@yuki0311.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { InstructionType } from './InstructionType';
import {
    InstructionTypeFromJSON,
    InstructionTypeFromJSONTyped,
    InstructionTypeToJSON,
} from './InstructionType';
import type { TimelineShowAlertRichText } from './TimelineShowAlertRichText';
import {
    TimelineShowAlertRichTextFromJSON,
    TimelineShowAlertRichTextFromJSONTyped,
    TimelineShowAlertRichTextToJSON,
} from './TimelineShowAlertRichText';
import type { UserResults } from './UserResults';
import {
    UserResultsFromJSON,
    UserResultsFromJSONTyped,
    UserResultsToJSON,
} from './UserResults';

/**
 * 
 * @export
 * @interface TimelineShowAlert
 */
export interface TimelineShowAlert {
    /**
     * 
     * @type {string}
     * @memberof TimelineShowAlert
     */
    alertType?: TimelineShowAlertAlertTypeEnum;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof TimelineShowAlert
     */
    colorConfig?: { [key: string]: any; };
    /**
     * 
     * @type {number}
     * @memberof TimelineShowAlert
     */
    displayDurationMs?: number;
    /**
     * 
     * @type {string}
     * @memberof TimelineShowAlert
     */
    displayLocation?: TimelineShowAlertDisplayLocationEnum;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof TimelineShowAlert
     */
    iconDisplayInfo?: { [key: string]: any; };
    /**
     * 
     * @type {TimelineShowAlertRichText}
     * @memberof TimelineShowAlert
     */
    richText: TimelineShowAlertRichText;
    /**
     * 
     * @type {number}
     * @memberof TimelineShowAlert
     */
    triggerDelayMs?: number;
    /**
     * 
     * @type {InstructionType}
     * @memberof TimelineShowAlert
     */
    type: InstructionType;
    /**
     * 
     * @type {Array<UserResults>}
     * @memberof TimelineShowAlert
     */
    usersResults: Array<UserResults>;
}


/**
 * @export
 */
export const TimelineShowAlertAlertTypeEnum = {
    NewTweets: 'NewTweets'
} as const;
export type TimelineShowAlertAlertTypeEnum = typeof TimelineShowAlertAlertTypeEnum[keyof typeof TimelineShowAlertAlertTypeEnum];

/**
 * @export
 */
export const TimelineShowAlertDisplayLocationEnum = {
    Top: 'Top'
} as const;
export type TimelineShowAlertDisplayLocationEnum = typeof TimelineShowAlertDisplayLocationEnum[keyof typeof TimelineShowAlertDisplayLocationEnum];


/**
 * Check if a given object implements the TimelineShowAlert interface.
 */
export function instanceOfTimelineShowAlert(value: object): boolean {
    if (!('richText' in value)) return false;
    if (!('type' in value)) return false;
    if (!('usersResults' in value)) return false;
    return true;
}

export function TimelineShowAlertFromJSON(json: any): TimelineShowAlert {
    return TimelineShowAlertFromJSONTyped(json, false);
}

export function TimelineShowAlertFromJSONTyped(json: any, ignoreDiscriminator: boolean): TimelineShowAlert {
    if (json == null) {
        return json;
    }
    return {
        
        'alertType': json['alertType'] == null ? undefined : json['alertType'],
        'colorConfig': json['colorConfig'] == null ? undefined : json['colorConfig'],
        'displayDurationMs': json['displayDurationMs'] == null ? undefined : json['displayDurationMs'],
        'displayLocation': json['displayLocation'] == null ? undefined : json['displayLocation'],
        'iconDisplayInfo': json['iconDisplayInfo'] == null ? undefined : json['iconDisplayInfo'],
        'richText': TimelineShowAlertRichTextFromJSON(json['richText']),
        'triggerDelayMs': json['triggerDelayMs'] == null ? undefined : json['triggerDelayMs'],
        'type': InstructionTypeFromJSON(json['type']),
        'usersResults': ((json['usersResults'] as Array<any>).map(UserResultsFromJSON)),
    };
}

export function TimelineShowAlertToJSON(value?: TimelineShowAlert | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'alertType': value['alertType'],
        'colorConfig': value['colorConfig'],
        'displayDurationMs': value['displayDurationMs'],
        'displayLocation': value['displayLocation'],
        'iconDisplayInfo': value['iconDisplayInfo'],
        'richText': TimelineShowAlertRichTextToJSON(value['richText']),
        'triggerDelayMs': value['triggerDelayMs'],
        'type': InstructionTypeToJSON(value['type']),
        'usersResults': ((value['usersResults'] as Array<any>).map(UserResultsToJSON)),
    };
}

