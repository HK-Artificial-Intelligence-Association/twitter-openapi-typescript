/* tslint:disable */
/* eslint-disable */
/**
 * Twitter OpenAPI
 * Twitter OpenAPI(Swagger) specification
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: yuki@yuki0311.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { MediaSize } from './MediaSize';
import {
    MediaSizeFromJSON,
    MediaSizeFromJSONTyped,
    MediaSizeToJSON,
    MediaSizeToJSONTyped,
} from './MediaSize';

/**
 * 
 * @export
 * @interface MediaSizes
 */
export interface MediaSizes {
    /**
     * 
     * @type {MediaSize}
     * @memberof MediaSizes
     */
    large: MediaSize;
    /**
     * 
     * @type {MediaSize}
     * @memberof MediaSizes
     */
    medium: MediaSize;
    /**
     * 
     * @type {MediaSize}
     * @memberof MediaSizes
     */
    small: MediaSize;
    /**
     * 
     * @type {MediaSize}
     * @memberof MediaSizes
     */
    thumb: MediaSize;
}

/**
 * Check if a given object implements the MediaSizes interface.
 */
export function instanceOfMediaSizes(value: object): value is MediaSizes {
    if (!('large' in value) || value['large'] === undefined) return false;
    if (!('medium' in value) || value['medium'] === undefined) return false;
    if (!('small' in value) || value['small'] === undefined) return false;
    if (!('thumb' in value) || value['thumb'] === undefined) return false;
    return true;
}

export function MediaSizesFromJSON(json: any): MediaSizes {
    return MediaSizesFromJSONTyped(json, false);
}

export function MediaSizesFromJSONTyped(json: any, ignoreDiscriminator: boolean): MediaSizes {
    if (json == null) {
        return json;
    }
    return {
        
        'large': MediaSizeFromJSON(json['large']),
        'medium': MediaSizeFromJSON(json['medium']),
        'small': MediaSizeFromJSON(json['small']),
        'thumb': MediaSizeFromJSON(json['thumb']),
    };
}

export function MediaSizesToJSON(json: any): MediaSizes {
    return MediaSizesToJSONTyped(json, false);
}

export function MediaSizesToJSONTyped(value?: MediaSizes | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'large': MediaSizeToJSON(value['large']),
        'medium': MediaSizeToJSON(value['medium']),
        'small': MediaSizeToJSON(value['small']),
        'thumb': MediaSizeToJSON(value['thumb']),
    };
}

