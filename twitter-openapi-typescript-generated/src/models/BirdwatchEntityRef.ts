/* tslint:disable */
/* eslint-disable */
/**
 * Twitter OpenAPI
 * Twitter OpenAPI(Swagger) specification
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: yuki@yuki0311.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface BirdwatchEntityRef
 */
export interface BirdwatchEntityRef {
    /**
     * 
     * @type {string}
     * @memberof BirdwatchEntityRef
     */
    text?: string;
    /**
     * 
     * @type {string}
     * @memberof BirdwatchEntityRef
     */
    type: BirdwatchEntityRefTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof BirdwatchEntityRef
     */
    url?: string;
    /**
     * 
     * @type {string}
     * @memberof BirdwatchEntityRef
     */
    urlType?: BirdwatchEntityRefUrlTypeEnum;
}


/**
 * @export
 */
export const BirdwatchEntityRefTypeEnum = {
    TimelineUrl: 'TimelineUrl',
    TimelineRichTextHashtag: 'TimelineRichTextHashtag'
} as const;
export type BirdwatchEntityRefTypeEnum = typeof BirdwatchEntityRefTypeEnum[keyof typeof BirdwatchEntityRefTypeEnum];

/**
 * @export
 */
export const BirdwatchEntityRefUrlTypeEnum = {
    ExternalUrl: 'ExternalUrl'
} as const;
export type BirdwatchEntityRefUrlTypeEnum = typeof BirdwatchEntityRefUrlTypeEnum[keyof typeof BirdwatchEntityRefUrlTypeEnum];


/**
 * Check if a given object implements the BirdwatchEntityRef interface.
 */
export function instanceOfBirdwatchEntityRef(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "type" in value;

    return isInstance;
}

export function BirdwatchEntityRefFromJSON(json: any): BirdwatchEntityRef {
    return BirdwatchEntityRefFromJSONTyped(json, false);
}

export function BirdwatchEntityRefFromJSONTyped(json: any, ignoreDiscriminator: boolean): BirdwatchEntityRef {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'text': !exists(json, 'text') ? undefined : json['text'],
        'type': json['type'],
        'url': !exists(json, 'url') ? undefined : json['url'],
        'urlType': !exists(json, 'urlType') ? undefined : json['urlType'],
    };
}

export function BirdwatchEntityRefToJSON(value?: BirdwatchEntityRef | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'text': value.text,
        'type': value.type,
        'url': value.url,
        'urlType': value.urlType,
    };
}

