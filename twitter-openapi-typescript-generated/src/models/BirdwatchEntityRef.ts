/* tslint:disable */
/* eslint-disable */
/**
 * Twitter OpenAPI
 * Twitter OpenAPI(Swagger) specification
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: yuki@yuki0311.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface BirdwatchEntityRef
 */
export interface BirdwatchEntityRef {
    /**
     * 
     * @type {string}
     * @memberof BirdwatchEntityRef
     */
    text?: string;
    /**
     * 
     * @type {string}
     * @memberof BirdwatchEntityRef
     */
    type: BirdwatchEntityRefTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof BirdwatchEntityRef
     */
    url?: string;
    /**
     * 
     * @type {string}
     * @memberof BirdwatchEntityRef
     */
    urlType?: BirdwatchEntityRefUrlTypeEnum;
}


/**
 * @export
 */
export const BirdwatchEntityRefTypeEnum = {
    TimelineUrl: 'TimelineUrl',
    TimelineRichTextHashtag: 'TimelineRichTextHashtag'
} as const;
export type BirdwatchEntityRefTypeEnum = typeof BirdwatchEntityRefTypeEnum[keyof typeof BirdwatchEntityRefTypeEnum];

/**
 * @export
 */
export const BirdwatchEntityRefUrlTypeEnum = {
    ExternalUrl: 'ExternalUrl'
} as const;
export type BirdwatchEntityRefUrlTypeEnum = typeof BirdwatchEntityRefUrlTypeEnum[keyof typeof BirdwatchEntityRefUrlTypeEnum];


/**
 * Check if a given object implements the BirdwatchEntityRef interface.
 */
export function instanceOfBirdwatchEntityRef(value: object): value is BirdwatchEntityRef {
    if (!('type' in value) || value['type'] === undefined) return false;
    return true;
}

export function BirdwatchEntityRefFromJSON(json: any): BirdwatchEntityRef {
    return BirdwatchEntityRefFromJSONTyped(json, false);
}

export function BirdwatchEntityRefFromJSONTyped(json: any, ignoreDiscriminator: boolean): BirdwatchEntityRef {
    if (json == null) {
        return json;
    }
    return {
        
        'text': json['text'] == null ? undefined : json['text'],
        'type': json['type'],
        'url': json['url'] == null ? undefined : json['url'],
        'urlType': json['urlType'] == null ? undefined : json['urlType'],
    };
}

export function BirdwatchEntityRefToJSON(value?: BirdwatchEntityRef | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'text': value['text'],
        'type': value['type'],
        'url': value['url'],
        'urlType': value['urlType'],
    };
}

