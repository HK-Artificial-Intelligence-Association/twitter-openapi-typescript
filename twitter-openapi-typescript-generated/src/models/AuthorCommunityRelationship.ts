/* tslint:disable */
/* eslint-disable */
/**
 * Twitter OpenAPI
 * Twitter OpenAPI(Swagger) specification
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: yuki@yuki0311.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Community } from './Community';
import {
    CommunityFromJSON,
    CommunityFromJSONTyped,
    CommunityToJSON,
} from './Community';
import type { UserResults } from './UserResults';
import {
    UserResultsFromJSON,
    UserResultsFromJSONTyped,
    UserResultsToJSON,
} from './UserResults';

/**
 * 
 * @export
 * @interface AuthorCommunityRelationship
 */
export interface AuthorCommunityRelationship {
    /**
     * 
     * @type {Community}
     * @memberof AuthorCommunityRelationship
     */
    communityResults: Community;
    /**
     * 
     * @type {string}
     * @memberof AuthorCommunityRelationship
     */
    role?: AuthorCommunityRelationshipRoleEnum;
    /**
     * 
     * @type {UserResults}
     * @memberof AuthorCommunityRelationship
     */
    userResults?: UserResults;
}


/**
 * @export
 */
export const AuthorCommunityRelationshipRoleEnum = {
    Member: 'Member'
} as const;
export type AuthorCommunityRelationshipRoleEnum = typeof AuthorCommunityRelationshipRoleEnum[keyof typeof AuthorCommunityRelationshipRoleEnum];


/**
 * Check if a given object implements the AuthorCommunityRelationship interface.
 */
export function instanceOfAuthorCommunityRelationship(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "communityResults" in value;

    return isInstance;
}

export function AuthorCommunityRelationshipFromJSON(json: any): AuthorCommunityRelationship {
    return AuthorCommunityRelationshipFromJSONTyped(json, false);
}

export function AuthorCommunityRelationshipFromJSONTyped(json: any, ignoreDiscriminator: boolean): AuthorCommunityRelationship {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'communityResults': CommunityFromJSON(json['community_results']),
        'role': !exists(json, 'role') ? undefined : json['role'],
        'userResults': !exists(json, 'user_results') ? undefined : UserResultsFromJSON(json['user_results']),
    };
}

export function AuthorCommunityRelationshipToJSON(value?: AuthorCommunityRelationship | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'community_results': CommunityToJSON(value.communityResults),
        'role': value.role,
        'user_results': UserResultsToJSON(value.userResults),
    };
}

