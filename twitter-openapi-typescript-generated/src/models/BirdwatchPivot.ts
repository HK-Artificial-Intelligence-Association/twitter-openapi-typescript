/* tslint:disable */
/* eslint-disable */
/**
 * Twitter OpenAPI
 * Twitter OpenAPI(Swagger) specification
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: yuki@yuki0311.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { BirdwatchPivotCallToAction } from './BirdwatchPivotCallToAction';
import {
    BirdwatchPivotCallToActionFromJSON,
    BirdwatchPivotCallToActionFromJSONTyped,
    BirdwatchPivotCallToActionToJSON,
} from './BirdwatchPivotCallToAction';
import type { BirdwatchPivotFooter } from './BirdwatchPivotFooter';
import {
    BirdwatchPivotFooterFromJSON,
    BirdwatchPivotFooterFromJSONTyped,
    BirdwatchPivotFooterToJSON,
} from './BirdwatchPivotFooter';
import type { BirdwatchPivotNote } from './BirdwatchPivotNote';
import {
    BirdwatchPivotNoteFromJSON,
    BirdwatchPivotNoteFromJSONTyped,
    BirdwatchPivotNoteToJSON,
} from './BirdwatchPivotNote';
import type { BirdwatchPivotSubtitle } from './BirdwatchPivotSubtitle';
import {
    BirdwatchPivotSubtitleFromJSON,
    BirdwatchPivotSubtitleFromJSONTyped,
    BirdwatchPivotSubtitleToJSON,
} from './BirdwatchPivotSubtitle';

/**
 * 
 * @export
 * @interface BirdwatchPivot
 */
export interface BirdwatchPivot {
    /**
     * 
     * @type {BirdwatchPivotCallToAction}
     * @memberof BirdwatchPivot
     */
    callToAction?: BirdwatchPivotCallToAction;
    /**
     * 
     * @type {string}
     * @memberof BirdwatchPivot
     */
    destinationUrl: string;
    /**
     * 
     * @type {BirdwatchPivotFooter}
     * @memberof BirdwatchPivot
     */
    footer: BirdwatchPivotFooter;
    /**
     * 
     * @type {string}
     * @memberof BirdwatchPivot
     */
    iconType: BirdwatchPivotIconTypeEnum;
    /**
     * 
     * @type {BirdwatchPivotNote}
     * @memberof BirdwatchPivot
     */
    note: BirdwatchPivotNote;
    /**
     * 
     * @type {string}
     * @memberof BirdwatchPivot
     */
    shorttitle: string;
    /**
     * 
     * @type {BirdwatchPivotSubtitle}
     * @memberof BirdwatchPivot
     */
    subtitle: BirdwatchPivotSubtitle;
    /**
     * 
     * @type {string}
     * @memberof BirdwatchPivot
     */
    title: string;
    /**
     * 
     * @type {string}
     * @memberof BirdwatchPivot
     */
    visualStyle?: BirdwatchPivotVisualStyleEnum;
}


/**
 * @export
 */
export const BirdwatchPivotIconTypeEnum = {
    BirdwatchV1Icon: 'BirdwatchV1Icon'
} as const;
export type BirdwatchPivotIconTypeEnum = typeof BirdwatchPivotIconTypeEnum[keyof typeof BirdwatchPivotIconTypeEnum];

/**
 * @export
 */
export const BirdwatchPivotVisualStyleEnum = {
    Default: 'Default'
} as const;
export type BirdwatchPivotVisualStyleEnum = typeof BirdwatchPivotVisualStyleEnum[keyof typeof BirdwatchPivotVisualStyleEnum];


/**
 * Check if a given object implements the BirdwatchPivot interface.
 */
export function instanceOfBirdwatchPivot(value: object): boolean {
    if (!('destinationUrl' in value)) return false;
    if (!('footer' in value)) return false;
    if (!('iconType' in value)) return false;
    if (!('note' in value)) return false;
    if (!('shorttitle' in value)) return false;
    if (!('subtitle' in value)) return false;
    if (!('title' in value)) return false;
    return true;
}

export function BirdwatchPivotFromJSON(json: any): BirdwatchPivot {
    return BirdwatchPivotFromJSONTyped(json, false);
}

export function BirdwatchPivotFromJSONTyped(json: any, ignoreDiscriminator: boolean): BirdwatchPivot {
    if (json == null) {
        return json;
    }
    return {
        
        'callToAction': json['callToAction'] == null ? undefined : BirdwatchPivotCallToActionFromJSON(json['callToAction']),
        'destinationUrl': json['destinationUrl'],
        'footer': BirdwatchPivotFooterFromJSON(json['footer']),
        'iconType': json['iconType'],
        'note': BirdwatchPivotNoteFromJSON(json['note']),
        'shorttitle': json['shorttitle'],
        'subtitle': BirdwatchPivotSubtitleFromJSON(json['subtitle']),
        'title': json['title'],
        'visualStyle': json['visualStyle'] == null ? undefined : json['visualStyle'],
    };
}

export function BirdwatchPivotToJSON(value?: BirdwatchPivot | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'callToAction': BirdwatchPivotCallToActionToJSON(value['callToAction']),
        'destinationUrl': value['destinationUrl'],
        'footer': BirdwatchPivotFooterToJSON(value['footer']),
        'iconType': value['iconType'],
        'note': BirdwatchPivotNoteToJSON(value['note']),
        'shorttitle': value['shorttitle'],
        'subtitle': BirdwatchPivotSubtitleToJSON(value['subtitle']),
        'title': value['title'],
        'visualStyle': value['visualStyle'],
    };
}

