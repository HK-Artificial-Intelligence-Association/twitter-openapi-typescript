/* tslint:disable */
/* eslint-disable */
/**
 * Twitter OpenAPI
 * Twitter OpenAPI(Swagger) specification
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: yuki@yuki0311.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Media } from './Media';
import {
    MediaFromJSON,
    MediaFromJSONTyped,
    MediaToJSON,
} from './Media';
import type { Timestamp } from './Timestamp';
import {
    TimestampFromJSON,
    TimestampFromJSONTyped,
    TimestampToJSON,
} from './Timestamp';
import type { Url } from './Url';
import {
    UrlFromJSON,
    UrlFromJSONTyped,
    UrlToJSON,
} from './Url';

/**
 * 
 * @export
 * @interface Entities
 */
export interface Entities {
    /**
     * 
     * @type {Array<{ [key: string]: any; }>}
     * @memberof Entities
     */
    hashtags: Array<{ [key: string]: any; }>;
    /**
     * 
     * @type {Array<Media>}
     * @memberof Entities
     */
    media?: Array<Media>;
    /**
     * 
     * @type {Array<{ [key: string]: any; }>}
     * @memberof Entities
     */
    symbols: Array<{ [key: string]: any; }>;
    /**
     * 
     * @type {Array<Timestamp>}
     * @memberof Entities
     */
    timestamps?: Array<Timestamp>;
    /**
     * 
     * @type {Array<Url>}
     * @memberof Entities
     */
    urls: Array<Url>;
    /**
     * 
     * @type {Array<{ [key: string]: any; }>}
     * @memberof Entities
     */
    userMentions: Array<{ [key: string]: any; }>;
}

/**
 * Check if a given object implements the Entities interface.
 */
export function instanceOfEntities(value: object): value is Entities {
    if (!('hashtags' in value) || value['hashtags'] === undefined) return false;
    if (!('symbols' in value) || value['symbols'] === undefined) return false;
    if (!('urls' in value) || value['urls'] === undefined) return false;
    if (!('userMentions' in value) || value['userMentions'] === undefined) return false;
    return true;
}

export function EntitiesFromJSON(json: any): Entities {
    return EntitiesFromJSONTyped(json, false);
}

export function EntitiesFromJSONTyped(json: any, ignoreDiscriminator: boolean): Entities {
    if (json == null) {
        return json;
    }
    return {
        
        'hashtags': json['hashtags'],
        'media': json['media'] == null ? undefined : ((json['media'] as Array<any>).map(MediaFromJSON)),
        'symbols': json['symbols'],
        'timestamps': json['timestamps'] == null ? undefined : ((json['timestamps'] as Array<any>).map(TimestampFromJSON)),
        'urls': ((json['urls'] as Array<any>).map(UrlFromJSON)),
        'userMentions': json['user_mentions'],
    };
}

export function EntitiesToJSON(value?: Entities | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'hashtags': value['hashtags'],
        'media': value['media'] == null ? undefined : ((value['media'] as Array<any>).map(MediaToJSON)),
        'symbols': value['symbols'],
        'timestamps': value['timestamps'] == null ? undefined : ((value['timestamps'] as Array<any>).map(TimestampToJSON)),
        'urls': ((value['urls'] as Array<any>).map(UrlToJSON)),
        'user_mentions': value['userMentions'],
    };
}

